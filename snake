.equ HEAD_X, 0x1000 ; snake head's position on x-axis
.equ HEAD_Y, 0x1004 ; snake head's position on y-axis
.equ TAIL_X, 0x1008 ; snake tail's position on x-axis
.equ TAIL_Y, 0x100C ; snake tail's position on y-axis
.equ SCORE, 0x1010 ; score address
.equ GSA, 0x1014 ; game state array
.equ LEDS, 0x2000 ; LED addresses
.equ SEVEN_SEGS, 0x1198 ; 7-segment display addresses
.equ RANDOM_NUM, 0x2010 ; Random number generator address
.equ BUTTONS, 0x2030 ; Button addresses

; BEGIN:clear_leds
clear_leds:

ldw t0, LEDS(zero)		; Load the current value of LEDS[0]
ldw t1, LEDS+4(zero)	; Load the current value of LEDS[1]
ldw t2, LEDS+8(zero) 	; Load the current value of LEDS[2]
	
and t0, t0, zero		; LED[0] = 0x"0000"
and t1, t1, zero		; LED[1] = 0x"0000"
and t2, t2, zero		; LED[2] = 0x"0000"

stw t0, LEDS(zero)		; Storing the results in LEDS[0]
stw t1, LEDS+4(zero)	; Storing the results in LEDS[1]
stw t2, LEDS+8(zero)	; Storing the results in LEDS[2]

ret
; END:clean_data


;BEGIN: set_pixel
set_pixel:

addi a0, zero, 1		; this simulates the x input
addi a1, zero, 8		; this simulates the y input

add t1, zero, 1
add t2, zero, 2
add t3, zero, 3

cmplti t0, a0, 4		; Compares the x value is less than 4
bne zero, t0, led0		; if it is true that means we're in LED[0]
cmplti t0, a0, 8		; otherwise we could be in LED[1] or LED[2]
bne zero, t0, led1		; Compares the x value is less than 8
cmplti t0, a0, 12		; otherwise we could be in LED[2]
bne zero, t0, led2

led0:

beq t0, t1, low_eight
ldw t4, LEDS(zero)

low_eight:
addi 

led1:
ldw t1, LEDS+4(zero)

led2:
ldw t1, LEDS+8(zero)

ret 
 