.equ HEAD_X, 0x1000 ; snake head's position on x-axis
.equ HEAD_Y, 0x1004 ; snake head's position on y-axis
.equ TAIL_X, 0x1008 ; snake tail's position on x-axis
.equ TAIL_Y, 0x100C ; snake tail's position on y-axis
.equ SCORE, 0x1010 ; score address
.equ GSA, 0x1014 ; game state array
.equ LEDS, 0x2000 ; LED addresses
.equ SEVEN_SEGS, 0x1198 ; 7-segment display addresses
.equ RANDOM_NUM, 0x2010 ; Random number generator address
.equ BUTTONS, 0x2030 ; Button addresses

; BEGIN:clear_leds
clear_leds:

ldw t0, LEDS(zero)		; Load the current value of LEDS[0]
ldw t1, LEDS+4(zero)	; Load the current value of LEDS[1]
ldw t2, LEDS+8(zero) 	; Load the current value of LEDS[2]
	
and t0, t0, zero		; LED[0] = 0x"0000"
and t1, t1, zero		; LED[1] = 0x"0000"
and t2, t2, zero		; LED[2] = 0x"0000"

stw t0, LEDS(zero)		; Storing the results in LEDS[0]
stw t1, LEDS+4(zero)	; Storing the results in LEDS[1]
stw t2, LEDS+8(zero)	; Storing the results in LEDS[2]

ret
; END:clean_data


;BEGIN: set_pixel
set_pixel:

addi a0, zero, 4		; this simulates the x input
addi a1, zero, 1		; this simulates the y input

addi t1, zero, 1
addi t2, zero, 2
addi t3, zero, 3

cmplti t0, a0, 4		; Compares the x value is less than 4
bne zero, t0, led0		; if it is true that means we're in LED[0]
cmplti t0, a0, 8		; otherwise we could be in LED[1] or LED[2]
bne zero, t0, led1		; Compares the x value is less than 8
cmplti t0, a0, 12		; otherwise we could be in LED[2]
bne zero, t0, led2

led0:

ldw t4, LEDS(zero)		; Upload the current state of the LEDS[0]

beq a0, zero, led0_0	; Compares: x=0
beq a0, t1, led0_1		; Compares: x=1
beq a0, t2, led0_2		; Compares: x=2
beq a0, t3, led0_3		; Compares: x=3

ret

led0_0:					; We enter here if we want to modify bits[7:0]
sll t1, t1, a1			; Shift left "y" times
or t4, t4, t1 
stw t4, LEDS(zero)
ret

led0_1:					; We enter here if we want to modify bits[15:8]
addi a1, a1, 8			; We add 8 in order to select the second group of bits
sll t1, t1, a1			; Shift left "y" times
or t4, t4, t1 
stw t4, LEDS(zero)
ret

led0_2:					; We enter here if we want to modify bits[23:16]
addi a1, a1, 16			; We add 8 in order to select the third group of bits
sll t1, t1, a1			; Shift left "y" times
or t4, t4, t1
stw t4, LEDS(zero)
ret

led0_3:					; We enter here if we want to modify bits[31:24]
addi a1, a1, 24			; We add 8 in order to select the fourth group of bits
sll t1, t1, a1			; Shift left "y" times
or t4, t4, t1 
stw t4, LEDS(zero)
ret



led1:

ldw t4, LEDS+4(zero)	; Upload the current state of the LEDS[1]

sub a0, a0, t1
sub a0, a0, t3			; Substract a0-4 to have a value 0<x<4

beq a0, zero, led1_0	; Compares: x=0
beq a0, t1, led1_1		; Compares: x=1
beq a0, t2, led1_2		; Compares: x=2
beq a0, t3, led1_3		; Compares: x=3

ret


led1_0:					; We enter here if we want to modify bits[7:0]
sll t1, t1, a1			; Shift left "y" times
or t4, t4, t1 
stw t4, LEDS+4(zero)
ret

led1_1:					; We enter here if we want to modify bits[15:8]
addi a1, a1, 8			; We add 8 in order to select the second group of bits
sll t1, t1, a1			; Shift left "y" times
or t4, t4, t1 
stw t4, LEDS+4(zero)
ret

led1_2:					; We enter here if we want to modify bits[23:16]
addi a1, a1, 16			; We add 8 in order to select the third group of bits
sll t1, t1, a1			; Shift left "y" times
or t4, t4, t1
stw t4, LEDS+4(zero)
ret

led1_3:					; We enter here if we want to modify bits[31:24]
addi a1, a1, 24			; We add 8 in order to select the fourth group of bits
sll t1, t1, a1			; Shift left "y" times
or t4, t4, t1 
stw t4, LEDS+4(zero)
ret



led2:
ldw t1, LEDS+8(zero)

sub a0, a0, t2
sub a0, a0, t3
sub a0, a0, t3			; Substract a0-8 to have a value 0<x<4

beq a0, zero, led2_0	; Compares: x=0
beq a0, t1, led2_1		; Compares: x=1
beq a0, t2, led2_2		; Compares: x=2
beq a0, t3, led2_3		; Compares: x=3

ret 

led2_0:					; We enter here if we want to modify bits[7:0]
sll t1, t1, a1			; Shift left "y" times
or t4, t4, t1 
stw t4, LEDS+8(zero)
ret

led2_1:					; We enter here if we want to modify bits[15:8]
addi a1, a1, 8			; We add 8 in order to select the second group of bits
sll t1, t1, a1			; Shift left "y" times
or t4, t4, t1 
stw t4, LEDS+8(zero)
ret

led2_2:					; We enter here if we want to modify bits[23:16]
addi a1, a1, 16			; We add 8 in order to select the third group of bits
sll t1, t1, a1			; Shift left "y" times
or t4, t4, t1
stw t4, LEDS+8(zero)
ret

led2_3:					; We enter here if we want to modify bits[31:24]
addi a1, a1, 24			; We add 8 in order to select the fourth group of bits
sll t1, t1, a1			; Shift left "y" times
or t4, t4, t1 
stw t4, LEDS+8(zero)
ret

; BEGIN: get_input
get_input:
	
	ldw t0, BUTTONS(zero)
	ldw t1, BUTTONS+4(zero)

	addi t5, t5, 31
	bne t0, t5, update
	
	ret
; END: get_input

; BEGIN: update
update:

	ldw t2, HEAD_X(zero)
	ldw t3, HEAD_Y(zero)
	
	slli t2, t2, 5			; 32x
	slli t3, t3, 2			; 4y
	add t4, t2, t3			; 32x + 4y
	addi t4, t4, GSA		; Final head GSA address: GSA base address + 32x +4y
	
	andi t1, t1, 15			; ignore bit 5
		
	stw t1,  0(t4)			; update the content
	and t1, t1, zero		; clear edge capture
	stw t0, BUTTONS+4(zero)
	
	ret
; END: update